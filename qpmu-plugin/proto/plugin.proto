syntax = "proto2";
package plugin;

import "google/protobuf/empty.proto";

service Plugin {
    // Initialise the service, given some initialisation info.
    //
    // It is guaranteed that this function will be called and completed
    // before any of the others are run.
    rpc Initialise (InitialiseRequest) returns (google.protobuf.Empty);
    rpc Query (QueryRequest) returns (QueryResponse);
    rpc Activate (ActivationRequest) returns (ActivationResponse);
    rpc AltActivate (ActivationRequest) returns (ActivationResponse);
    rpc HotkeyActivate (HotkeyActivationRequest) returns (ActivationResponse);
    rpc Complete (ActivationRequest) returns (CompletionResponse);
}

message InitialiseRequest {
    required string toml = 1;
    required string sqlite_url = 2;
}

message QueryRequest {
    required string query = 1;
}

message QueryResponse {
    repeated ListItem items = 1;
    // The kind of list to show.
    //
    // If this is not provided, the list style will be the default set
    // by the user. Plugins should only set one if the content makes the
    // most sense with one of these styles.
    oneof list_style {
        // Show one item per row.
        google.protobuf.Empty rows = 2;
        // A grid with an adaptive size.
        google.protobuf.Empty grid = 3;
        // A grid with a specific number of columns per row.
        uint32 grid_with_columns = 4;
    }
}

message ListItem {
    required string title = 1;
    required string description = 2;
    required string metadata = 3;
    oneof icon {
        // A named icon, taken from the system.
        string NAME = 4;
        // Just some text. It should be very short.
        string TEXT = 5;
    }
}

message ActivationResponse {
    repeated Action actions = 1;
}

message Action {
    // Required.
    oneof action {
        google.protobuf.Empty close = 1;
        Command run_command = 2;
        string run_shell = 3;
        string copy = 4;
        Input set_input = 5;
    };
}

message Command {
    required string cmd = 1;
    repeated string args = 2;
}

message Input {
    required string query = 1;
    required uint32 range_lb = 2;
    required uint32 range_ub = 3;
}

message ActivationRequest {
    required string query = 1;
    required ListItem selected = 2;
}

message CompletionResponse {
    optional Input input = 1;
}

message HotkeyActivationRequest {
    required ActivationRequest request = 1;
    required Hotkey hotkey = 2;
}

message Hotkey {
    required Key key = 1;
    required Modifiers modifiers = 2;
}

message Modifiers {
    required bool ctrl = 1;
    required bool alt = 2;
    required bool shift = 3;
    required bool super = 4;
}

// For now, keys are all the un-shifted keys on a standard US QWERTY keyboard.
// I may implement proper cross-keyboard support later.
enum Key {
    DIGIT0 = 0;
    DIGIT1 = 1;
    DIGIT2 = 2;
    DIGIT3 = 3;
    DIGIT4 = 4;
    DIGIT5 = 5;
    DIGIT6 = 6;
    DIGIT7 = 7;
    DIGIT8 = 8;
    DIGIT9 = 9;
    A = 10;
    B = 11;
    C = 12;
    D = 13;
    E = 14;
    F = 15;
    G = 16;
    H = 17;
    I = 18;
    J = 19;
    K = 20;
    L = 21;
    M = 22;
    N = 23;
    O = 24;
    P = 25;
    Q = 26;
    R = 27;
    S = 28;
    T = 29;
    U = 30;
    V = 31;
    W = 32;
    X = 33;
    Y = 34;
    Z = 35;
    F1 = 36;
    F2 = 37;
    F3 = 38;
    F4 = 39;
    F5 = 40;
    F6 = 41;
    F7 = 42;
    F8 = 43;
    F9 = 44;
    F10 = 45;
    F11 = 46;
    F12 = 47;
    F13 = 48;
    F14 = 49;
    F15 = 50;
    F16 = 51;
    F17 = 52;
    F18 = 53;
    F19 = 54;
    F20 = 55;
    F21 = 56;
    F22 = 57;
    F23 = 58;
    F24 = 59;
    BACKTICK = 60;
    HYPHEN = 61;
    EQUAL = 62;
    TAB = 63;
    LEFT_BRACKET = 64;
    RIGHT_BRACKET = 65;
    BACKSLASH = 66;
    SEMICOLON = 67;
    APOSTROPHE = 68;
    ENTER = 69;
    COMMA = 70;
    PERIOD = 71;
    SLASH = 72;
}
