use crate::proto;

#[derive(Debug, Clone)]
pub struct Hotkey {
    pub key: Key,
    pub ctrl: bool,
    pub alt: bool,
    pub shift: bool,
    pub meta: bool,
}

impl Hotkey {
    pub(crate) fn from_proto(proto: proto::Hotkey) -> Self {
        Self {
            key: Key::from_proto(proto.key()),
            ctrl: proto.ctrl,
            alt: proto.alt,
            shift: proto.shift,
            meta: proto.meta,
        }
    }
}

#[non_exhaustive]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum Key {
    Digit0 = 0,
    Digit1 = 1,
    Digit2 = 2,
    Digit3 = 3,
    Digit4 = 4,
    Digit5 = 5,
    Digit6 = 6,
    Digit7 = 7,
    Digit8 = 8,
    Digit9 = 9,
    A = 10,
    B = 11,
    C = 12,
    D = 13,
    E = 14,
    F = 15,
    G = 16,
    H = 17,
    I = 18,
    J = 19,
    K = 20,
    L = 21,
    M = 22,
    N = 23,
    O = 24,
    P = 25,
    Q = 26,
    R = 27,
    S = 28,
    T = 29,
    U = 30,
    V = 31,
    W = 32,
    X = 33,
    Y = 34,
    Z = 35,
    F1 = 36,
    F2 = 37,
    F3 = 38,
    F4 = 39,
    F5 = 40,
    F6 = 41,
    F7 = 42,
    F8 = 43,
    F9 = 44,
    F10 = 45,
    F11 = 46,
    F12 = 47,
    F13 = 48,
    F14 = 49,
    F15 = 50,
    F16 = 51,
    F17 = 52,
    F18 = 53,
    F19 = 54,
    F20 = 55,
    F21 = 56,
    F22 = 57,
    F23 = 58,
    F24 = 59,
    Backtick = 60,
    Hyphen = 61,
    Equal = 62,
    Tab = 63,
    LeftBracket = 64,
    RightBracket = 65,
    Backslash = 66,
    Semicolon = 67,
    Apostrophe = 68,
    Enter = 69,
    Comma = 70,
    Period = 71,
    Slash = 72,
}

impl Key {
    pub(crate) fn from_proto(proto: proto::Key) -> Self {
        match proto {
            proto::Key::Digit0 => Self::Digit0,
            proto::Key::Digit1 => Self::Digit1,
            proto::Key::Digit2 => Self::Digit2,
            proto::Key::Digit3 => Self::Digit3,
            proto::Key::Digit4 => Self::Digit4,
            proto::Key::Digit5 => Self::Digit5,
            proto::Key::Digit6 => Self::Digit6,
            proto::Key::Digit7 => Self::Digit7,
            proto::Key::Digit8 => Self::Digit8,
            proto::Key::Digit9 => Self::Digit9,
            proto::Key::A => Self::A,
            proto::Key::B => Self::B,
            proto::Key::C => Self::C,
            proto::Key::D => Self::D,
            proto::Key::E => Self::E,
            proto::Key::F => Self::F,
            proto::Key::G => Self::G,
            proto::Key::H => Self::H,
            proto::Key::I => Self::I,
            proto::Key::J => Self::J,
            proto::Key::K => Self::K,
            proto::Key::L => Self::L,
            proto::Key::M => Self::M,
            proto::Key::N => Self::N,
            proto::Key::O => Self::O,
            proto::Key::P => Self::P,
            proto::Key::Q => Self::Q,
            proto::Key::R => Self::R,
            proto::Key::S => Self::S,
            proto::Key::T => Self::T,
            proto::Key::U => Self::U,
            proto::Key::V => Self::V,
            proto::Key::W => Self::W,
            proto::Key::X => Self::X,
            proto::Key::Y => Self::Y,
            proto::Key::Z => Self::Z,
            proto::Key::F1 => Self::F1,
            proto::Key::F2 => Self::F2,
            proto::Key::F3 => Self::F3,
            proto::Key::F4 => Self::F4,
            proto::Key::F5 => Self::F5,
            proto::Key::F6 => Self::F6,
            proto::Key::F7 => Self::F7,
            proto::Key::F8 => Self::F8,
            proto::Key::F9 => Self::F9,
            proto::Key::F10 => Self::F10,
            proto::Key::F11 => Self::F11,
            proto::Key::F12 => Self::F12,
            proto::Key::F13 => Self::F13,
            proto::Key::F14 => Self::F14,
            proto::Key::F15 => Self::F15,
            proto::Key::F16 => Self::F16,
            proto::Key::F17 => Self::F17,
            proto::Key::F18 => Self::F18,
            proto::Key::F19 => Self::F19,
            proto::Key::F20 => Self::F20,
            proto::Key::F21 => Self::F21,
            proto::Key::F22 => Self::F22,
            proto::Key::F23 => Self::F23,
            proto::Key::F24 => Self::F24,
            proto::Key::Backtick => Self::Backtick,
            proto::Key::Hyphen => Self::Hyphen,
            proto::Key::Equal => Self::Equal,
            proto::Key::Tab => Self::Tab,
            proto::Key::LeftBracket => Self::LeftBracket,
            proto::Key::RightBracket => Self::RightBracket,
            proto::Key::Backslash => Self::Backslash,
            proto::Key::Semicolon => Self::Semicolon,
            proto::Key::Apostrophe => Self::Apostrophe,
            proto::Key::Enter => Self::Enter,
            proto::Key::Comma => Self::Comma,
            proto::Key::Period => Self::Period,
            proto::Key::Slash => Self::Slash,
        }
    }
}
