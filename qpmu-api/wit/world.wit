package qpmu:plugin;

interface host {
    variant spawn-error {
        not-found,
        permission-denied,
        broken-pipe,
        would-block,
        invalid-input,
        timed-out,
        write-zero,
        interrupted,
        unsupported,
        unexpected-eof,
        out-of-memory,
        other(string),
    }

    record output {
        exit-code: option<s32>,
        stdout: list<u8>,
        stderr: list<u8>,
    }

    flags capture {
        stdout,
        stderr,
    }

    spawn: func(cmd: string, args: list<string>, capture: capture) -> result<output, spawn-error>;
}

world plugin {
    import host;
    use host.{output, spawn-error};

    /// A single row to display.
    record list-item {
        title: string,
        description: string,
        metadata: string,
    }

    /// An action to perform on plugin activation.
    variant plugin-action {
        close,
        run-command(tuple<string, list<string>>),
        run-command-string(string),
        copy(string),
    }

    /// An action to run on the host.
    ///
    /// The result of this action will be passed to the plugin 
    /// by calling `handle-deferred`.
    variant deferred-action {
        /// Runs a command, returning the process output later.
        spawn(tuple<string, list<string>>)
    }

    variant deferred-result {
        process-output(result<output, spawn-error>),
    }

    variant query-result {
        /// Set the displayed list.
        set-list(list<list-item>),
        /// Defer an action to perform and retrieve the result again later.
        defer(deferred-action),
        /// Do nothing. This makes the plugin get skipped, passing the
        /// query to the next plugins.
        nothing,
    }

    export query: func(query: string) -> result<query-result, string>;
    export handle-deferred: func(query: string, %result: deferred-result) -> result<query-result, string>;
    export activate: func(selected: list-item) -> result<list<plugin-action>, string>;

    include wasi:cli/command@0.2.2;
}